%% File : TeCurveSignalGen.tlc
%% Created : Mon May 16 18:26:19 2022
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "TeCurveSignalGen.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  TeCurveSignalGen "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void TeCurveSignalGen_Start_wrapper(real_T *xD);

    extern void TeCurveSignalGen_Outputs_wrapper(const real_T *nrpm,
			const real_T *NormRpm,
			const real_T *TeNorm,
			const real_T *StaticFCoef,
			const real_T *KpLoadCurve,
			real_T *TLCurveOut,
			const real_T *xD);
    extern void TeCurveSignalGen_Update_wrapper(const real_T *nrpm,
			const real_T *NormRpm,
			const real_T *TeNorm,
			const real_T *StaticFCoef,
			const real_T *KpLoadCurve,
			real_T *TLCurveOut,
			real_T *xD);

    extern void TeCurveSignalGen_Terminate_wrapper(real_T *xD);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
{
  real_T initVector[5] = {0,0,0,0,0};
  %assign rollVars = ["<dwork>/DSTATE"]
  %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
  %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
    %if %<LibBlockDWorkWidth(DSTATE)> == 1
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
    %else
      %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
    %endif
  %endroll
}


%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  TeCurveSignalGen_Outputs_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<py0>, %<pxd>);
  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%
%%
%function Update(block, system) Output
    /* S-Function "TeCurveSignalGen_wrapper" Block: %<Name> */
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pu2 = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pu3 = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pu4 = LibBlockInputSignalAddr(4, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  TeCurveSignalGen_Update_wrapper(%<pu0>, %<pu1>, %<pu2>, %<pu3>, %<pu4>, %<py0>, %<pxd>);
  %%
%endfunction

%% [EOF] TeCurveSignalGen.tlc

